// 2019/11/20

// Author: Alex Liu

// Chart recorder software V2. Stepper motor drive, sensor read, and Kaman filter
float previous_reading;  // place holder for previous reading
bool previous_drop = 0;   // 1 for yes, 0 for no
bool current_drop = 0;     // 1 for yes, 0 for no

unsigned long seconds;

float max_drop = .07; // maximum percentage difference that will be filtered
// Motor Set Up
// PUL, DIR, ENA positive to 5V vcc

int NumRev = 3;
int NumStep = 200;           // how many steps per rev
int PUL = 7;                  //define Pulse pin
int DIR = 6;                  //define Direction pin
int ENA = 5;                  //define Enable Pin

int RevCount = 0;
int StepCount = 0;

// Sensor Set up

float readout;                 // readout value from the LVDT
float filteredval;

int lvdtpin = A2;

// Kalman Filter Set up

float varVolt = 3e-07;  // variance. start small. tweak as moving along
float varProcess = 1e-8;  // original 1e-8
float Pc = 0.0;
float G = 0.0;
float P = 1.0;
float Xp = 0.0;
float Zp = 0.0;
float Xe = 0.0;

// End of Variable Definition

void setup() {

  pinMode (PUL, OUTPUT);
  pinMode (DIR, OUTPUT);
  pinMode (ENA, OUTPUT);
  pinMode (lvdtpin, INPUT);
  Serial.begin(9600);
  Serial.println("Loop start");

}

void loop() {

  //    previous_reading = analogRead(lvdtpin);          // this line will only run once; start off with a direct reading

  while (true) {
    previous_reading = analogRead(lvdtpin);          // this line will only run once; start off with a direct reading

    cwstep(10000);     // move motor

    readlvdt();

  }
} // main loop end

int ccwstep(int waitperiod) {   // Clockwise Step Function. Define waitperiod when called

  digitalWrite(DIR, LOW);     // DIR = Low: counter clock wise
  digitalWrite(ENA, HIGH);
  digitalWrite(PUL, HIGH);
  delayMicroseconds(waitperiod);
  digitalWrite(PUL, LOW);
  delayMicroseconds(waitperiod);

  return 0;
}   // clockwisestep end


int cwstep(int waitperiod) {   // Counter - Clockwise Step Function. Define waitperiod when called

  digitalWrite(DIR, HIGH);     // DIR = HIGH: clock wise
  digitalWrite(ENA, HIGH);
  digitalWrite(PUL, HIGH);
  delayMicroseconds(waitperiod);
  digitalWrite(PUL, LOW);
  delayMicroseconds(waitperiod);

  return 0;
}   // clockwisestep end

// LVDT read function

int readlvdt() {

  // if ran with previous_drop = 0, the previous value is a drop and the current cycle will skip filtering. at the same time, the boolean
  // will be set to 1 to allow the next cycle to be filtered.
  // if ran with previous_drop = 0, the previous cycle was not a drop, and filtering should be carried out.

  readout = analogRead(lvdtpin);

  if (abs((readout - previous_reading) / previous_reading) > max_drop) { // register as reading change if new reading is less than 80% of previous reading (including when previous value was also a drop)

    current_drop = 1; // the current value is a drop; skip filtering in the next cycle

  }
  else {

    current_drop = 0;

  }

  if (previous_drop == 0 && current_drop == 0) {

    filteredval = Kalmanread(readout);

    //    Serial.print(millis());
    //    Serial.print(",");                  // time stamp
    Serial.print(filteredval);
    Serial.print(",");
    Serial.println(readout);

  }
  else {                // all other cases

    //    Serial.print(millis());
    //    Serial.print(",");                  // time stamp
    Serial.print(readout);   // this would be "filtered" if everything checks out
    Serial.print(",");
    Serial.println(readout);

  }

  previous_drop = current_drop;  // record the drop boolean for this cycle

  //  previous_reading = readout;

  return 0;

} // end of LVDT read function

// Kalman Filter Function

int Kalmanread(float voltage) {

  //  Pc = P + varProcess;
  //  G = Pc / (Pc + varVolt);  // kalman gain
  //  P = (1 - G) * Pc;
  //  Xp = Xe;
  //  Zp = Xp;
  //  Xe = G * (voltage - Zp) + Xp; // the kalman estimate of the sensor voltage

  float diff = voltage - previous_reading;
  Xe = previous_reading + diff * 0.02;

  return Xe;
} // end of Kalman Filter function
